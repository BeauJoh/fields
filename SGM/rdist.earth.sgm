<!doctype s-function-doc system "s-function-doc.dtd" [
<!entity % S-OLD "INCLUDE">
]
>
<s-function-doc>
<s-topics>
   <s-topic>rdist.earth</s-topic>
</s-topics>
<s-title>
Great circle distance matrix 
</s-title>
<s-description>
Given two sets of longitude/latitude locations computes the Great circle
(geogrpahic)  distance matrix
among all pairings. 
</s-description>
<s-usage>
<s-old-style-usage>
rdist.earth(loc1, loc2, miles = T, R = NULL)
</s-old-style-usage>
</s-usage>
<s-args-required>
<s-arg name="x1">
Matrix of first set of lon/lat coordinates first column is the
longitudes
and second is the latitudes. 
</s-arg>
</s-args-required>
<s-args-optional>
<s-arg name="x2">
Matrix of second  set of lon/lat coordinates first column is the
longitudes
and second is the latitudes. If missing x1 is used. 
</s-arg>
<s-arg name="miles">
If true distances are in statute miles if false distances in kilometers. 
</s-arg>
<s-arg name="R">
Radius to use for sphere to find spherical distances. If NULL the radius
is either in miles or kilometers depending on the values of the miles
argument. If R=1 then distances are of course in radians. 
</s-arg>

</s-args-optional>
<s-value>
The great circle distance matrix if nrow(x1)=m and nrow(
x2)=n then the returned matrix will be mXn. 
</s-value>
<s-details>
Surprisingly this  all done efficiently in S.
</s-details>
<s-see>  rdist, exp.earth.cov </s-see>
<s-examples>
<s-example>
out<- rdist.earth ( ozone$lon.lat)
#out is a 20X20 distance matrix

</s-example>
</s-examples>
<s-keywords>
<s-keyword>spatial</s-keyword>
</s-keywords>
<s-docclass>
function
</s-docclass>
</s-function-doc>
