<!doctype s-function-doc system "s-function-doc.dtd" [
<!entity % S-OLD "INCLUDE">
]
>
<s-function-doc>
<s-topics>
   <s-topic>interp.surface</s-topic>
</s-topics>
<s-title>
Fast bilinear interpolator from a grid.
</s-title>
<s-description>
Uses bilinear weights to interpolate values on a rectangular
grid to arbitrary locations. 
</s-description>
<s-usage>
<s-old-style-usage>
 interp.surface(obj, loc)
</s-old-style-usage>
</s-usage>
<s-args-required>
<s-arg name="obj">
A list with components x,y, and z in the same style as used by contour,
persp, image etc. x and y are the X and Y grid values and z is a matrix
with the corresponding values of the surface
</s-arg>
<s-arg name="loc">
A matrix of (irregular) locations to interpolate. First column of loc
isthe X coordinates and second is the Y's. 
</s-arg>
</s-args-required>
<s-value> An vector of interpolated values.  NA are returned for
regions of the obj$z that are NA and also for locations outside of the
range of the grid. 
</s-value>
<s-details>
Here is a brief explanation of
the interpolation:  Suppose that the location, (locx, locy)  lies in
between the first two grid points in both x an y. That is  locx is between
x1 and x2 and
locy is between y1 and y2.  Let ex= (l1-x1)/(x2-x1) ey= (l2-y1)/(y2-y1).
The
interpolant is

( 1-ex)(1-ey)*z11 + (1- ex)(ey)*z12 + ( ex)(1-ey)*z21 + ( ex)(ey)*z22  

Where the z's are the corresponding elements of the Z matrix. 
</s-details>
<s-see>
image.smooth, as.surface, as.image, image.plot, krig.image,Tps
</s-see>
<s-examples>
<s-example type = text>

#
# evaluate an image at a finer grid
# 

data( lennon)
# create the surface object
obj<- list( x= 1:20, y=1:20, z= lennon[ 201:220, 201:220])


# make up a finer grid 
temp<- seq( 1,20,,150)
make.surface.grid( list( temp,temp))-> loc

set.panel(2,1)
interp.surface( obj, loc)-> look

image( obj$z)
image( as.surface( loc, look))


</s-example>
</s-examples>
<s-keywords>
<s-keyword>spatial</s-keyword>
</s-keywords>
<s-docclass>
function
</s-docclass>
</s-function-doc>
