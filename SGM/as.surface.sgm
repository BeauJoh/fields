<!doctype s-function-doc system "s-function-doc.dtd" [
<!entity % S-OLD "INCLUDE">
]
>
<s-function-doc>
<s-topics>
   <s-topic>as.surface</s-topic>
</s-topics>
<s-title>
Creates an "surface" object from grid values. 
</s-title>
<s-description>
Reformats the vector from evaluating  a function on a grid of points into 
a list for use with surface plotting function. The list has the
usual components x,y and z and is suitable for use with persp, contour,
image and image.plot.
 </s-description>
<s-usage>
<s-old-style-usage>
as.surface(grid.list, z, order.variables="xy") 
</s-old-style-usage>
</s-usage>
<s-args-required>
<s-arg name="grid.list">
A description of the grid used to evaluate the function. This can 
either be in the form of a grid.list 
( see help file for grid.list) or the matrix of grid of points produced 
by make.surface.grid 
</s-arg>
<s-arg name="z">
The value of the function evaluated at the gridded points. 
</s-arg>
</s-args-required>
<s-args-optional>
<s-arg name="order.variables">
Either "xy" or "yx" specifies how the x and y variables used to 
evaluate the function are matched with the x and y grids in the surface 
object. 
</s-arg>
</s-args-optional>
<s-value>
A list of class surface. This object is a modest generalization of the 
list input format (x,y,z,) for the S functions contour, image or persp.  
<s-return-component name="x">
The grid values in the  X-axis
</s-return-component>
<s-return-component name="y">
The grid values in the  Y-axis
</s-return-component>
<s-return-component name="z">
A matrix of dimensions nrow= length of x and ncol= length of y with
entries being the  grid point value reformatted from z. 
</s-return-component>

Besides the x, y and z components there are also components xlab, ylab,
and main that are used by the surface function to add axis labels and a
title.  </s-value> 
<s-details>
This function was written to simply to go back and forth between a
matrix of gridded values and the stacked vector obtained by stacking
columns. The main application is evaluating a function at each grid point
and then reforming the results for plotting. (See example below.)

If zimage is matrix of values then the input vector is c( zimage).
To go from the stacked vector to the matrix one needs the the nrow ncol
and explains why grid information must also be specified.
 
Note that the z input argument must be in the order 
values in order of stacking columns of the image. This is also the
order of the grid points generated by make.surface.grid.

To convert irregular 2-d data to a surface object where there are missing
cells see the function as.image. 
</s-details>
 
<s-see> grid.list, make.surface.grid, surface, contour,
image.plot, as.image </s-see> 
<s-examples> <s-example type = text> 

# Make a perspective of the surface Z= X**2 -Y**2 
# Do this by evaluating quadratic function on a 25 X 25 grid
  
grid.l<-list( X= seq( -2,2,,25), Y= seq( -2,2,,25)) 
xg<-make.surface.grid( grid.l)
# xg is a 625X2 matrix that has all pairs of X and Y grid values 
z<- xg[,1]**2 - xg[,2]**2  
# now fold z in the matrix format needed for persp 
out.p<-as.surface( xg, z) 
persp( out.p) 
# also try  plot( out.p) to see the default plot for a surface object 
</s-example>
</s-examples>
<s-keywords>
<s-keyword>manip</s-keyword>
</s-keywords>
<s-docclass>
function
</s-docclass>
</s-function-doc>
