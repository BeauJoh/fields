<!doctype s-function-doc system "s-function-doc.dtd" [
<!entity % S-OLD "INCLUDE">
]
>
<s-function-doc>
<s-topics>
   <s-topic>Wtransform.sim</s-topic>
</s-topics>
<s-title>
Simulates a 2-d random wavelet field  
</s-title>
<s-description>
Generates a Gaussian field using quadratic W transform basis functions.   
</s-description>
<s-usage>
<s-old-style-usage>
Wtransform.sim(D, cut.min=16) 
</s-old-style-usage>
</s-usage>
<s-args-required>
<s-arg name="D">
A matrix the same size as the image with the variances of the  
wavelet coefficients.   
</s-arg>
<s-arg name="cut.min">
Coarsest level of resolution in wavelet expansion this set the number of 
smooth basis functions.  
</s-arg>
</s-args-required>
<s-value>
A  matrix image of the random field 
</s-value>
<s-side-effects>
</s-side-effects>
<s-details>
The simulation is easy just an inverse transform applied to weighted 
independent normals. 
The tricky part is getting all the values of D in the right places.  
See plot.coef to plot out the elements of D to check them and also  
Wtransform.D to fill D from variances that are fixed at each level of 
resolution.  
</s-details>
<s-see>
Wtransfrom.image, W.image.cov  </s-see>
<s-examples>
<s-example type = text>
# The function is currently defined as 
# 
#Fill to look like Gaussian. 
# 
 wght <- c(1., 0.05, 1e-07, 1e-09, 1e-11, 1e-14) 
D<- Wtransform.D(128,128, wght, cut.min=4)$D 
set.panel( 3,3)
for ( k in 1:9){
look<- Wtransform.sim( D, cut.min=4) 
image( look)
}
 
</s-example>
</s-examples>
<s-keywords>
<s-keyword>spatial</s-keyword>
</s-keywords>
<s-docclass>
function
</s-docclass>
</s-function-doc>
